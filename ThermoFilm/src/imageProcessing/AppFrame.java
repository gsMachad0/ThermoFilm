/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imageProcessing;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author Guilherme
 */
public class AppFrame extends javax.swing.JFrame {

    ImageProcessor processor;
    boolean colorFilterLock;
    boolean selectionMode, getMediaRGB, getPoints;
    boolean confirmArea, senseDirect;

    int r, g, b, xmin, xmax, ymin, ymax, x1, x2, y1, y2, realImageW, realImageH, nSelecoes, nSelecionados, pointsTaken, areaAmostra, imageLabelHeight, imageLabelWidth;
    BufferedImage imageOpened;
    ArrayList<Coordenada> trackerXy;
    ArrayList<Ponto> trackerPoints;
    String directory;
    ImagemZoom imz1, imz2, imz3, imzresult;

    /**
     * Creates new form Salvacao
     */
    public AppFrame() {
        directory = "null";
        initComponents();
        this.setTitle("Thermo Film");
        this.setSize(1030, 750);
        this.setLocationRelativeTo(null);
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        //this.setLayout(new GridLayout(5,1));
        this.nPixelFiltrado.setEditable(false);
        this.nPixelsSample.setEditable(false);
        this.prcBioSample.setEditable(false);
        nSelecionados = 0;

        imz1 = new ImagemZoom(this);
        imz1.setVisible(false);
        imz2 = new ImagemZoom(this);
        imz2.setVisible(false);
        imz3 = new ImagemZoom(this);
        imz3.setVisible(false);
        imzresult = new ImagemZoom(this);
        imzresult.setVisible(false);
        
        

        confirmCoordButton.setEnabled(false);
        processor = new ImageProcessor(this);
        trackerPoints = new ArrayList();
        trackerXy = new ArrayList();
        filterLabel.setOpaque(true);
        nSelectField.setEnabled(false);
        colorFilterLock = false;
        imageLabelWidth = imagePrev.getWidth();
        imageLabelHeight = imagePrev.getHeight();
        selectionMode = false;
        senseDirect = false;
        confirmArea = false;
        getPoints = false;
        getMediaRGB = false;
        pointsTaken = 0;
        senseOn.setSelected(true);
        filterSlider.setValue(35);
        senseNumberLabel.setText("" + filterSlider.getValue());

        confirmSampleButton.setEnabled(false);
        xMaxField.setEnabled(false);
        yMaxField.setEnabled(false);
        xMinField.setEnabled(false);
        yMinField.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modLabel = new javax.swing.JLabel();
        nSelectLabel = new javax.swing.JLabel();
        nSelectField = new javax.swing.JTextField();
        nSelectButton = new javax.swing.JButton();
        ymaxLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        confirmSampleButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        imagePrev = new javax.swing.JLabel();
        xMinField = new javax.swing.JTextField();
        xMaxField = new javax.swing.JTextField();
        yMinField = new javax.swing.JTextField();
        yMaxField = new javax.swing.JTextField();
        xminLabel = new javax.swing.JLabel();
        xmaxLabel = new javax.swing.JLabel();
        yminLabel = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        nameSample = new javax.swing.JTextField();
        nomeSampleOK = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        rColorField = new javax.swing.JTextField();
        gColorField = new javax.swing.JTextField();
        bColorField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        filterLabel = new javax.swing.JLabel();
        applyFilterButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        lockFilterButton = new javax.swing.JButton();
        resetSelectButton = new javax.swing.JButton();
        getRGBButton = new javax.swing.JButton();
        filterSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        senseNumberLabel = new javax.swing.JTextField();
        senseOn = new javax.swing.JRadioButton();
        openImage = new javax.swing.JButton();
        senseDirectButton = new javax.swing.JButton();
        senseDirectLabel = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        getPointsButtons = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        nPixelsSample = new javax.swing.JTextField();
        nPixelFiltrado = new javax.swing.JTextField();
        prcBioSample = new javax.swing.JTextField();
        saveResults = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        confirmCoordButton = new javax.swing.JButton();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        exportToDesktopButton = new javax.swing.JButton();
        jLabel79 = new javax.swing.JLabel();
        changeAreaButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        modLabel.setText("Selection Mode: Cut");
        getContentPane().add(modLabel);
        modLabel.setBounds(520, 360, 140, 32);

        nSelectLabel.setText("NÂº Selections:");
        getContentPane().add(nSelectLabel);
        nSelectLabel.setBounds(731, 360, 80, 30);

        nSelectField.setText("1");
        getContentPane().add(nSelectField);
        nSelectField.setBounds(820, 360, 40, 30);

        nSelectButton.setText("Start");
        nSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nSelectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nSelectButton);
        nSelectButton.setBounds(860, 360, 60, 32);

        ymaxLabel.setText("yMax");
        getContentPane().add(ymaxLabel);
        ymaxLabel.setBounds(850, 410, 30, 30);

        jLabel1.setText(" [0]");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(530, 20, 30, 40);

        confirmSampleButton.setText("Compute");
        confirmSampleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmSampleButtonActionPerformed(evt);
            }
        });
        getContentPane().add(confirmSampleButton);
        confirmSampleButton.setBounds(780, 460, 120, 32);

        jLabel5.setText("-- -- -- -- -- -- -- -- -- -- -- -- -- --  X (320)  -- -- -- -- -- -- -- -- -- -- -- -- -- -- ");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(570, 30, 360, 16);

        jLabel6.setText("      Y");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(520, 170, 40, 16);

        jLabel7.setText("   (240)");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(520, 190, 50, 16);

        jLabel8.setText("|");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(540, 290, 16, 16);

        jLabel9.setText("|");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(540, 310, 16, 16);

        jLabel10.setText("[240]");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(530, 330, 30, 16);

        imagePrev.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imagePrevMousePressed(evt);
            }
        });
        getContentPane().add(imagePrev);
        imagePrev.setBounds(570, 60, 390, 280);
        getContentPane().add(xMinField);
        xMinField.setBounds(560, 410, 50, 30);
        getContentPane().add(xMaxField);
        xMaxField.setBounds(670, 410, 50, 30);
        getContentPane().add(yMinField);
        yMinField.setBounds(780, 410, 50, 30);
        getContentPane().add(yMaxField);
        yMaxField.setBounds(890, 410, 50, 30);

        xminLabel.setText("XMin");
        getContentPane().add(xminLabel);
        xminLabel.setBounds(520, 410, 28, 30);

        xmaxLabel.setText("XMax");
        getContentPane().add(xmaxLabel);
        xmaxLabel.setBounds(630, 410, 32, 30);

        yminLabel.setText("YMin ");
        getContentPane().add(yminLabel);
        yminLabel.setBounds(740, 400, 40, 50);

        jLabel14.setText("Sample Name:");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(20, 20, 90, 31);

        nameSample.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameSampleMouseClicked(evt);
            }
        });
        nameSample.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameSampleKeyPressed(evt);
            }
        });
        getContentPane().add(nameSample);
        nameSample.setBounds(110, 20, 240, 30);

        nomeSampleOK.setText("Open");
        nomeSampleOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeSampleOKActionPerformed(evt);
            }
        });
        getContentPane().add(nomeSampleOK);
        nomeSampleOK.setBounds(356, 20, 60, 30);

        jLabel15.setText("Filter Values:");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(70, 90, 80, 40);

        rColorField.setText("0 - 255");
        rColorField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rColorFieldMouseClicked(evt);
            }
        });
        getContentPane().add(rColorField);
        rColorField.setBounds(190, 100, 66, 24);

        gColorField.setText("0 - 255");
        gColorField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gColorFieldMouseClicked(evt);
            }
        });
        getContentPane().add(gColorField);
        gColorField.setBounds(280, 100, 66, 24);

        bColorField.setText("0 - 255");
        bColorField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bColorFieldMouseClicked(evt);
            }
        });
        getContentPane().add(bColorField);
        bColorField.setBounds(370, 100, 66, 24);

        jLabel16.setText("[R]");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(170, 100, 16, 20);

        jLabel17.setText("[G]");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(260, 100, 16, 20);

        jLabel18.setText("[B]");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(350, 100, 16, 20);

        jLabel19.setText("Image opened");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(720, 10, 119, 16);

        jLabel20.setText("Preview (color used in filter) :");
        getContentPane().add(jLabel20);
        jLabel20.setBounds(170, 280, 165, 50);
        getContentPane().add(filterLabel);
        filterLabel.setBounds(180, 330, 170, 130);

        applyFilterButton.setText("Apply Filter");
        applyFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyFilterButtonActionPerformed(evt);
            }
        });
        getContentPane().add(applyFilterButton);
        applyFilterButton.setBounds(210, 240, 101, 30);

        jLabel21.setText("-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --");
        getContentPane().add(jLabel21);
        jLabel21.setBounds(6, 505, 1020, 16);

        jLabel28.setText("Results");
        getContentPane().add(jLabel28);
        jLabel28.setBounds(20, 530, 78, 16);

        lockFilterButton.setText("Lock filter");
        lockFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockFilterButtonActionPerformed(evt);
            }
        });
        getContentPane().add(lockFilterButton);
        lockFilterButton.setBounds(350, 240, 100, 30);

        resetSelectButton.setText("Reset");
        resetSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSelectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetSelectButton);
        resetSelectButton.setBounds(920, 360, 63, 32);

        getRGBButton.setText("Average RGB");
        getRGBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getRGBButtonActionPerformed(evt);
            }
        });
        getContentPane().add(getRGBButton);
        getRGBButton.setBounds(60, 240, 110, 30);

        filterSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                filterSliderMouseReleased(evt);
            }
        });
        getContentPane().add(filterSlider);
        filterSlider.setBounds(230, 190, 200, 30);

        jLabel2.setText("Sensivity:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(70, 190, 60, 20);

        senseNumberLabel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                senseNumberLabelKeyPressed(evt);
            }
        });
        getContentPane().add(senseNumberLabel);
        senseNumberLabel.setBounds(130, 190, 60, 24);

        senseOn.setText("Use sensitivity");
        senseOn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                senseOnMouseClicked(evt);
            }
        });
        getContentPane().add(senseOn);
        senseOn.setBounds(70, 140, 114, 30);

        openImage.setText("Search");
        openImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageActionPerformed(evt);
            }
        });
        getContentPane().add(openImage);
        openImage.setBounds(410, 20, 80, 30);

        senseDirectButton.setText("<>");
        senseDirectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senseDirectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(senseDirectButton);
        senseDirectButton.setBounds(260, 140, 50, 30);

        senseDirectLabel.setText("Negative sensitivity");
        getContentPane().add(senseDirectLabel);
        senseDirectLabel.setBounds(320, 140, 109, 30);

        jLabel36.setText("|");
        getContentPane().add(jLabel36);
        jLabel36.setBounds(500, 0, 16, 16);

        jLabel37.setText("|");
        getContentPane().add(jLabel37);
        jLabel37.setBounds(500, 20, 16, 16);

        jLabel38.setText("|");
        getContentPane().add(jLabel38);
        jLabel38.setBounds(500, 40, 16, 16);

        jLabel39.setText("|");
        getContentPane().add(jLabel39);
        jLabel39.setBounds(500, 60, 16, 16);

        jLabel42.setText("|");
        getContentPane().add(jLabel42);
        jLabel42.setBounds(500, 100, 16, 16);

        jLabel43.setText("|");
        getContentPane().add(jLabel43);
        jLabel43.setBounds(500, 120, 16, 16);

        jLabel45.setText("|");
        getContentPane().add(jLabel45);
        jLabel45.setBounds(500, 80, 16, 16);

        jLabel40.setText("|");
        getContentPane().add(jLabel40);
        jLabel40.setBounds(500, 140, 16, 16);

        jLabel41.setText("|");
        getContentPane().add(jLabel41);
        jLabel41.setBounds(500, 160, 16, 16);

        jLabel44.setText("|");
        getContentPane().add(jLabel44);
        jLabel44.setBounds(500, 180, 16, 16);

        jLabel46.setText("|");
        getContentPane().add(jLabel46);
        jLabel46.setBounds(500, 200, 16, 16);

        jLabel47.setText("|");
        getContentPane().add(jLabel47);
        jLabel47.setBounds(500, 240, 16, 16);

        jLabel48.setText("|");
        getContentPane().add(jLabel48);
        jLabel48.setBounds(500, 260, 16, 16);

        jLabel49.setText("|");
        getContentPane().add(jLabel49);
        jLabel49.setBounds(500, 220, 16, 16);

        jLabel50.setText("|");
        getContentPane().add(jLabel50);
        jLabel50.setBounds(500, 280, 16, 16);

        jLabel51.setText("|");
        getContentPane().add(jLabel51);
        jLabel51.setBounds(500, 300, 16, 16);

        jLabel52.setText("|");
        getContentPane().add(jLabel52);
        jLabel52.setBounds(500, 320, 16, 16);

        jLabel53.setText("|");
        getContentPane().add(jLabel53);
        jLabel53.setBounds(500, 340, 16, 16);

        jLabel54.setText("|");
        getContentPane().add(jLabel54);
        jLabel54.setBounds(500, 380, 16, 16);

        jLabel55.setText("|");
        getContentPane().add(jLabel55);
        jLabel55.setBounds(500, 400, 16, 16);

        jLabel56.setText("|");
        getContentPane().add(jLabel56);
        jLabel56.setBounds(500, 360, 16, 16);

        jLabel3.setText("[320]");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(930, 30, 30, 16);

        jLabel11.setText("|");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(540, 230, 16, 16);

        jLabel57.setText("|");
        getContentPane().add(jLabel57);
        jLabel57.setBounds(540, 270, 16, 16);

        jLabel58.setText("|");
        getContentPane().add(jLabel58);
        jLabel58.setBounds(540, 250, 16, 16);

        jLabel59.setText("|");
        getContentPane().add(jLabel59);
        jLabel59.setBounds(540, 130, 16, 16);

        jLabel60.setText("|");
        getContentPane().add(jLabel60);
        jLabel60.setBounds(540, 210, 16, 16);

        jLabel61.setText("|");
        getContentPane().add(jLabel61);
        jLabel61.setBounds(540, 50, 16, 16);

        jLabel62.setText("|");
        getContentPane().add(jLabel62);
        jLabel62.setBounds(540, 110, 16, 16);

        jLabel63.setText("|");
        getContentPane().add(jLabel63);
        jLabel63.setBounds(540, 90, 16, 16);

        jLabel64.setText("|");
        getContentPane().add(jLabel64);
        jLabel64.setBounds(540, 70, 16, 16);

        jLabel65.setText("|");
        getContentPane().add(jLabel65);
        jLabel65.setBounds(500, 440, 16, 16);

        jLabel66.setText("|");
        getContentPane().add(jLabel66);
        jLabel66.setBounds(500, 500, 16, 16);

        jLabel67.setText("|");
        getContentPane().add(jLabel67);
        jLabel67.setBounds(500, 420, 16, 16);

        jLabel68.setText("|");
        getContentPane().add(jLabel68);
        jLabel68.setBounds(500, 460, 16, 16);

        jLabel69.setText("|");
        getContentPane().add(jLabel69);
        jLabel69.setBounds(500, 480, 16, 16);

        getPointsButtons.setText("Calculate area");
        getPointsButtons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPointsButtonsActionPerformed(evt);
            }
        });
        getContentPane().add(getPointsButtons);
        getPointsButtons.setBounds(630, 460, 130, 32);

        jLabel13.setText("Number of pixels in sample plate:");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(20, 550, 190, 40);

        jLabel22.setText("Number of pixels filtered:");
        getContentPane().add(jLabel22);
        jLabel22.setBounds(20, 600, 190, 40);

        jLabel23.setText("% of sample plate taken by biofilm:");
        getContentPane().add(jLabel23);
        jLabel23.setBounds(20, 650, 190, 40);

        nPixelsSample.setText("----------------");
        getContentPane().add(nPixelsSample);
        nPixelsSample.setBounds(240, 560, 78, 24);

        nPixelFiltrado.setText("----------------");
        getContentPane().add(nPixelFiltrado);
        nPixelFiltrado.setBounds(240, 610, 78, 24);

        prcBioSample.setText("----------------");
        getContentPane().add(prcBioSample);
        prcBioSample.setBounds(240, 660, 78, 24);

        saveResults.setText("Save Results");
        saveResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultsActionPerformed(evt);
            }
        });
        getContentPane().add(saveResults);
        saveResults.setBounds(800, 650, 190, 32);

        jButton2.setText("<>");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(660, 360, 50, 32);

        confirmCoordButton.setText("Use");
        confirmCoordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmCoordButtonActionPerformed(evt);
            }
        });
        getContentPane().add(confirmCoordButton);
        confirmCoordButton.setBounds(950, 410, 60, 30);

        jLabel70.setText("|");
        getContentPane().add(jLabel70);
        jLabel70.setBounds(500, 340, 16, 16);

        jLabel71.setText("|");
        getContentPane().add(jLabel71);
        jLabel71.setBounds(500, 380, 16, 16);

        jLabel72.setText("|");
        getContentPane().add(jLabel72);
        jLabel72.setBounds(500, 400, 16, 16);

        jLabel73.setText("|");
        getContentPane().add(jLabel73);
        jLabel73.setBounds(500, 360, 16, 16);

        jLabel74.setText("|");
        getContentPane().add(jLabel74);
        jLabel74.setBounds(500, 440, 16, 16);

        jLabel75.setText("|");
        getContentPane().add(jLabel75);
        jLabel75.setBounds(500, 500, 16, 16);

        jLabel76.setText("|");
        getContentPane().add(jLabel76);
        jLabel76.setBounds(500, 420, 16, 16);

        jLabel77.setText("|");
        getContentPane().add(jLabel77);
        jLabel77.setBounds(500, 460, 16, 16);

        jLabel78.setText("|");
        getContentPane().add(jLabel78);
        jLabel78.setBounds(500, 480, 16, 16);

        exportToDesktopButton.setText("Export results to Desktop");
        exportToDesktopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToDesktopButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exportToDesktopButton);
        exportToDesktopButton.setBounds(800, 600, 190, 32);

        jLabel79.setText("|");
        getContentPane().add(jLabel79);
        jLabel79.setBounds(540, 150, 16, 16);

        changeAreaButton.setText("Change");
        changeAreaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeAreaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(changeAreaButton);
        changeAreaButton.setBounds(330, 550, 80, 40);

        jButton1.setText("R");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(520, 460, 40, 32);

        jButton3.setText("About");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(800, 530, 190, 32);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nSelectButtonActionPerformed
        // TODO add your handling code here:
        if (!directory.equals("null")) {
            try {

                nSelecoes = Integer.parseInt(nSelectField.getText());
                int zoomW, zoomH;
                zoomW = 640;
                zoomH = 480;
                boolean freeToGo = false;
                int choice = JOptionPane.showConfirmDialog(rootPane, "Use default zoom values?");
                switch (choice) {
                    case 0:
                        freeToGo = true;
                        break;
                    case 1:
                        boolean exot = true;
                        while (exot) {
                            try {
                                zoomW = Integer.parseInt(JOptionPane.showInputDialog("Insert image width"));
                                zoomH = Integer.parseInt(JOptionPane.showInputDialog("Insert image height"));
                                exot = false;
                                freeToGo = true;
                            } catch (Exception e) {
                                exot = true;
                            }
                        }

                        break;
                    default:
                        freeToGo = false;
                        break;
                }
                if (freeToGo) {

                    imz2.setVisible(true);
                    imz2.recebeImagem((ImageIcon) imagePrev.getIcon(), realImageH, realImageW, zoomW, zoomH, 2);
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Insert valid number");
            }
            if (nSelecoes > 0) {
                nSelectField.setEnabled(false);
                nSelectButton.setEnabled(false);

                //confirmSampleButton.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Number of samples must be higher than 0");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Image not opened");
        }
    }//GEN-LAST:event_nSelectButtonActionPerformed

    public int getAreaSample() {
        return Integer.parseInt(this.nPixelsSample.getText());
    }

    public void setnPixelFiltrado(int x) {
        this.nPixelFiltrado.setText("" + x);
    }

    public void setPrcBioSample(double x) {
        this.prcBioSample.setText(String.format("%.2f", x) + "%");
    }

    public void setNPixelsSampleField(int n) {
        this.nPixelsSample.setText("" + n);
    }

    public void setCoord(String xi, String xf, String yi, String yf) {
        this.xMinField.setText(yi);
        this.xMaxField.setText(yf);
        this.yMinField.setText(xi);
        this.yMaxField.setText(xf);
        xmin = Integer.parseInt(this.xMinField.getText());
        xmax = Integer.parseInt(this.xMaxField.getText());
        ymin = Integer.parseInt(this.yMinField.getText());
        ymax = Integer.parseInt(this.yMaxField.getText());
    }

    public void setComputeButtonEnable(boolean x) {
        this.confirmSampleButton.setEnabled(x);
    }
    private void confirmSampleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmSampleButtonActionPerformed
        // TODO add your handling code here:
        if (nSelecionados < nSelecoes) {
            if (confirmArea) {
                confirmArea = false;
                trackerXy.add(new Coordenada(xmin, xmax, ymin, ymax));
                nSelecionados++;
            }
        }
        if (nSelecionados == nSelecoes) {

            processor.computSamples(trackerXy, directory, r, g, b);
            imzresult.recebeImagem((ImageIcon) imagePrev.getIcon(), realImageH, realImageW, 640, 480, 3);
            imzresult.filterAplly(xmin, xmax, ymin, ymax, r, g, b);

        }
    }//GEN-LAST:event_confirmSampleButtonActionPerformed

    private void imagePrevMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagePrevMousePressed
        // TODO add your handling code here:
        /*
        if (!selectionMode) {

            x1 = (int) (evt.getY() * (realImageH) / imagePrev.getHeight());
            y1 = (int) (evt.getX() * (realImageW) / imagePrev.getWidth());
        }
         */
    }//GEN-LAST:event_imagePrevMousePressed

    public int getSlider() {
        return filterSlider.getValue();
    }
    public boolean getSenseOn() {
        return senseOn.isSelected();
    }

    public void setRcolorField(String str) {
        this.rColorField.setText(str);
    }

    public void setGcolorField(String str) {
        this.gColorField.setText(str);
    }

    public void setBcolorField(String str) {
        this.bColorField.setText(str);
    }

    public void setFilterColor(double temp[]) {
        filterLabel.setBackground(new Color((int) temp[2], (int) temp[0], (int) temp[1]));
    }

    private void nomeSampleOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeSampleOKActionPerformed
        // TODO add your handling code here:

        try {
            nameSample.setText(nameSample.getText() + ".jpg");
            ImageIcon data1 = new ImageIcon(processor.dataBaseAdress + nameSample.getText());
            data1.setImage(data1.getImage().getScaledInstance(imagePrev.getWidth(), imagePrev.getHeight(), Image.SCALE_DEFAULT));
            Icon image = data1;
            imagePrev.setIcon(image);
            imageOpened = ImageIO.read(new File(processor.getDataBaseAdress() + nameSample.getText()));
            realImageW = imageOpened.getWidth();
            realImageH = imageOpened.getHeight();
            directory = processor.dataBaseAdress + nameSample.getText();
            trackerXy.clear();
        } catch (IOException ex) {

        }

    }//GEN-LAST:event_nomeSampleOKActionPerformed

    private void rColorFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rColorFieldMouseClicked
        // TODO add your handling code here:
        if (rColorField.getText().equals("0 - 255")) {
            rColorField.setText("");
        }
    }//GEN-LAST:event_rColorFieldMouseClicked

    private void gColorFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gColorFieldMouseClicked
        // TODO add your handling code here:
        if (gColorField.getText().equals("0 - 255")) {
            gColorField.setText("");
        }
    }//GEN-LAST:event_gColorFieldMouseClicked

    private void bColorFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bColorFieldMouseClicked
        // TODO add your handling code here:
        if (bColorField.getText().equals("0 - 255")) {
            bColorField.setText("");
        }
    }//GEN-LAST:event_bColorFieldMouseClicked

    private void applyFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyFilterButtonActionPerformed
        // TODO add your handling code here:
        try {

            if (rColorField.getText().equals("0 - 255") || rColorField.getText().equals("")) {
                rColorField.setText("0");

            }
            if (gColorField.getText().equals("0 - 255") || gColorField.getText().equals("")) {
                gColorField.setText("0");

            }
            if (bColorField.getText().equals("0 - 255") || bColorField.getText().equals("")) {
                bColorField.setText("0");
            }

            if (senseOn.isSelected()) {
                if (!senseDirect) {
                    r = Integer.parseInt(rColorField.getText()) - filterSlider.getValue();
                    g = Integer.parseInt(gColorField.getText()) - filterSlider.getValue();
                    b = Integer.parseInt(bColorField.getText()) - filterSlider.getValue();
                    if (r > 255) {
                        r = 255;
                    }
                    if (g > 255) {
                        g = 255;
                    }
                    if (b > 255) {
                        b = 255;
                    }
                    if (r < 0) {
                        r = 0;
                    }
                    if (g < 0) {
                        g = 0;
                    }
                    if (b < 0) {
                        b = 0;
                    }

                } else {
                    r = Integer.parseInt(rColorField.getText()) + filterSlider.getValue();
                    g = Integer.parseInt(gColorField.getText()) + filterSlider.getValue();
                    b = Integer.parseInt(bColorField.getText()) + filterSlider.getValue();
                    if (r > 255) {
                        r = 255;
                    }
                    if (g > 255) {
                        g = 255;
                    }
                    if (b > 255) {
                        b = 255;
                    }
                    if (r < 0) {
                        r = 0;
                    }
                    if (g < 0) {
                        g = 0;
                    }
                    if (b < 0) {
                        b = 0;
                    }
                }
            } else {
                r = Integer.parseInt(rColorField.getText());
                g = Integer.parseInt(gColorField.getText());
                b = Integer.parseInt(bColorField.getText());
            }
            filterLabel.setBackground(new Color(r, g, b));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Insert valid numbers");
            rColorField.setText("0");
            gColorField.setText("0");
            bColorField.setText("0");
        }

    }//GEN-LAST:event_applyFilterButtonActionPerformed

    private void lockFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockFilterButtonActionPerformed
        // TODO add your handling code here:
        if (!colorFilterLock) {
            rColorField.setEnabled(false);
            gColorField.setEnabled(false);
            bColorField.setEnabled(false);
            applyFilterButton.setEnabled(false);
            colorFilterLock = true;
            getRGBButton.setEnabled(false);
        } else {
            rColorField.setEnabled(true);
            gColorField.setEnabled(true);
            bColorField.setEnabled(true);
            getRGBButton.setEnabled(true);
            applyFilterButton.setEnabled(true);
            colorFilterLock = false;
        }

    }//GEN-LAST:event_lockFilterButtonActionPerformed


    private void resetSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSelectButtonActionPerformed
        // TODO add your handling code here:
        nSelecoes = 0;
        nSelecionados = 0;
        trackerXy.clear();
        confirmSampleButton.setEnabled(false);
        this.nSelectButton.setEnabled(true);


    }//GEN-LAST:event_resetSelectButtonActionPerformed

    private void getRGBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getRGBButtonActionPerformed
        // TODO add your handling code here:
        if (!directory.equals("null")) {
            int choice = JOptionPane.showConfirmDialog(rootPane, "Use default zoom values?");
            boolean freeToGo = false;
            int zoomW = 640, zoomH = 480;
            switch (choice) {
                case 0:
                    freeToGo = true;
                    break;
                case 1:
                    boolean exot = true;
                    while (exot) {
                        try {
                            zoomW = Integer.parseInt(JOptionPane.showInputDialog("Insert image width"));
                            zoomH = Integer.parseInt(JOptionPane.showInputDialog("Insert image height"));
                            exot = false;
                            freeToGo = true;
                        } catch (Exception e) {
                            exot = true;
                        }
                    }

                    break;
                default:
                    freeToGo = false;
                    break;
            }

            rColorField.setText("");
            gColorField.setText("");
            bColorField.setText("");
            r = 0;
            b = 0;
            g = 0;
            trackerXy.clear();
            if (freeToGo) {
                JOptionPane.showMessageDialog(rootPane, "Select area");
                imz1.setVisible(true);
                imz1.recebeImagem((ImageIcon) imagePrev.getIcon(), realImageH, realImageW, zoomW, zoomH, 1);

            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Image not foud");
        }

    }//GEN-LAST:event_getRGBButtonActionPerformed

    private void filterSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterSliderMouseReleased
        // TODO add your handling code here:

        senseNumberLabel.setText("" + filterSlider.getValue());
    }//GEN-LAST:event_filterSliderMouseReleased

    private void openImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();  //Cria uma instÃ¢ncia do JFileChooser
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "JPG & GIF Images", "jpg", "gif");  //Cria um filtro
        chooser.setFileFilter(filter);  //Altera o filtro do JFileChooser
        int returnVal = chooser.showOpenDialog(this); //Abre o diÃ¡logo JFileChooser
        if (returnVal == JFileChooser.APPROVE_OPTION) {  //Verifica se o usuÃ¡rio clicou no botÃ£o OK
            String dest = chooser.getCurrentDirectory() + "\\" + chooser.getSelectedFile().getName();

            ImageIcon data1 = new ImageIcon(dest);
            data1.setImage(data1.getImage().getScaledInstance(imagePrev.getWidth(), imagePrev.getHeight(), Image.SCALE_DEFAULT));
            Icon image = data1;
            imagePrev.setIcon(image);

            try {
                imageOpened = ImageIO.read(new File(dest));
                realImageW = imageOpened.getWidth();
                realImageH = imageOpened.getHeight();
                nameSample.setText(chooser.getSelectedFile().getName());
                directory = chooser.getCurrentDirectory() + "\\" + chooser.getSelectedFile().getName();
                trackerXy.clear();
            } catch (IOException ex) {
                Logger.getLogger(AppFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_openImageActionPerformed

    private void senseOnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_senseOnMouseClicked
        // TODO add your handling code here:
        //l
    }//GEN-LAST:event_senseOnMouseClicked

    private void senseDirectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senseDirectButtonActionPerformed
        // TODO add your handling code here:
        if (senseDirect) {
            senseDirectLabel.setText("Negative sensitivity");
            senseDirect = false;
        } else {
            senseDirectLabel.setText("Positive sensitivity");
            senseDirect = true;
        }

    }//GEN-LAST:event_senseDirectButtonActionPerformed

    private void senseNumberLabelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_senseNumberLabelKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                filterSlider.setValue(Integer.parseInt(senseNumberLabel.getText()));
            } catch (Exception e) {

            }
        }

    }//GEN-LAST:event_senseNumberLabelKeyPressed

    private void getPointsButtonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPointsButtonsActionPerformed

        // TODO add your handling code here:
        if (!directory.equals("null")) {
            getPoints = true;
            pointsTaken = 0;
            int zoomW, zoomH;
            zoomW = 640;
            zoomH = 480;
            boolean freeToGo = false;
            int choice = JOptionPane.showConfirmDialog(rootPane, "Use default zoom values?");
            switch (choice) {
                case 0:
                    freeToGo = true;
                    break;
                case 1:
                    boolean exot = true;
                    while (exot) {
                        try {
                            zoomW = Integer.parseInt(JOptionPane.showInputDialog("Insert image width"));
                            zoomH = Integer.parseInt(JOptionPane.showInputDialog("Insert image height"));
                            exot = false;
                            freeToGo = true;
                        } catch (Exception e) {
                            exot = true;
                        }
                    }

                    break;
                default:
                    freeToGo = false;
                    break;
            }
            if (freeToGo) {

                imz3.setVisible(true);
                imz3.recebeImagem((ImageIcon) imagePrev.getIcon(), realImageH, realImageW, zoomW, zoomH, 0);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Image not foud");
        }
    }//GEN-LAST:event_getPointsButtonsActionPerformed

    private void nameSampleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameSampleKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                nameSample.setText(nameSample.getText() + ".jpg");
                ImageIcon data1 = new ImageIcon(processor.dataBaseAdress + nameSample.getText());
                data1.setImage(data1.getImage().getScaledInstance(imagePrev.getWidth(), imagePrev.getHeight(), Image.SCALE_DEFAULT));
                Icon image = data1;
                imagePrev.setIcon(image);
                imageOpened = ImageIO.read(new File(processor.getDataBaseAdress() + nameSample.getText()));
                realImageW = imageOpened.getWidth();
                realImageH = imageOpened.getHeight();
                directory = processor.dataBaseAdress + nameSample.getText();
            } catch (IOException ex) {

            }
        }
    }//GEN-LAST:event_nameSampleKeyPressed

    private void saveResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultsActionPerformed
        // TODO add your handling code here:
        try {
            File arquivo = new File(System.getProperty("user.home") + "\\Documents\\Results.txt");
            if (arquivo.exists()) {

                arquivo.createNewFile();
            }
            FileWriter fw = new FileWriter(arquivo, true);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.newLine();
            bw.write("Results of the sample: " + this.nameSample.getText());
            bw.newLine();
            bw.write("Directory: " + this.directory);
            bw.newLine();
            bw.write("RGB values: R[" + rColorField.getText() + "] G[" + gColorField.getText() + "] B[" + bColorField.getText() + "]");
            bw.newLine();
            if (senseOn.isSelected()) {
                if (senseDirect) {
                    bw.write("POSITIVE ");
                } else {
                    bw.write("NEGATIVE ");
                }
                bw.write("sense value used: " + senseNumberLabel.getText());
                bw.newLine();
            } else {
                bw.write("Sensivity not used");
                bw.newLine();
            }
            bw.write("Coordinates of the analyzed area: X-MIN[" + xMinField.getText() + "] X-MAX[" + xMaxField.getText() + "] Y-MIN[" + yMinField.getText() + "] Y-MAX[" + yMaxField.getText() + "]");
            bw.newLine();
            bw.write("Sample plate area: " + nPixelsSample.getText() + " pixels");
            bw.newLine();
            bw.write("Number of pixels found higher than the filter in the plate: " + nPixelFiltrado.getText());
            bw.newLine();
            bw.write("Percentage of plate taken by biofilm: " + prcBioSample.getText());
            bw.newLine();
            bw.newLine();
            bw.write("============================================================================");

            bw.flush();
            bw.close();
            JOptionPane.showMessageDialog(rootPane, "Saved");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveResultsActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (this.selectionMode) {

            selectionMode = false;
            this.xMaxField.setEnabled(false);
            this.yMaxField.setEnabled(false);
            this.xMinField.setEnabled(false);
            this.yMinField.setEnabled(false);
            confirmCoordButton.setEnabled(false);
            modLabel.setText("Selection Mode: Cut");
        } else if (!this.selectionMode) {

            this.selectionMode = true;
            this.xMaxField.setEnabled(true);
            this.yMaxField.setEnabled(true);
            this.xMinField.setEnabled(true);
            this.yMinField.setEnabled(true);
            confirmCoordButton.setEnabled(true);
            modLabel.setText("Selection Mode: Values");
            this.selectionMode = true;
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void confirmCoordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmCoordButtonActionPerformed
        // TODO add your handling code here:
        try {
            xmin = Integer.parseInt(yMinField.getText());
            xmax = Integer.parseInt(yMaxField.getText());
            ymin = Integer.parseInt(xMinField.getText());
            ymax = Integer.parseInt(xMaxField.getText());
            if (xmin < 0 || xmin > realImageH || xmax < 0 || xmax > realImageH || ymin < 0 || ymin > realImageW || ymax < 0 || ymax > realImageW) {
                JOptionPane.showMessageDialog(rootPane, "Selection must respect image borders");
                xMinField.setText("");
                xMaxField.setText("");
                yMinField.setText("");
                yMaxField.setText("");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Insert valid numbers");
        }
    }//GEN-LAST:event_confirmCoordButtonActionPerformed

    private void exportToDesktopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToDesktopButtonActionPerformed
        // TODO add your handling code here:
        String aux = System.getProperty("user.home") + "\\Desktop\\exportedResults.txt";
        try (FileReader fr = new FileReader(System.getProperty("user.home") + "\\Documents\\Results.txt");
                FileWriter fw = new FileWriter(aux)) {
            int c = fr.read();
            while (c != -1) {
                fw.write(c);
                c = fr.read();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_exportToDesktopButtonActionPerformed

    private void changeAreaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeAreaButtonActionPerformed
        // TODO add your handling code here:
        try {

            nPixelsSample.setText(JOptionPane.showInputDialog("Insert area:"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Insert valid number");
        }
    }//GEN-LAST:event_changeAreaButtonActionPerformed

    private void nameSampleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameSampleMouseClicked
        // TODO add your handling code here:
        if (nameSample.getText().length() >= 4) {
            boolean dotFound = false;
            int aux = -1;
            while (!dotFound) {
                aux++;
                if (nameSample.getText().charAt(aux) == '.') {
                    dotFound = true;
                }
            }
            String auxs = nameSample.getText().substring(0, aux);
            nameSample.setText(auxs);
        }
    }//GEN-LAST:event_nameSampleMouseClicked

    public void reloadImage() {
        try {
            ImageIcon data1 = new ImageIcon(directory);
            data1.setImage(data1.getImage().getScaledInstance(imagePrev.getWidth(), imagePrev.getHeight(), Image.SCALE_DEFAULT));
            Icon image = data1;
            imagePrev.setIcon(image);
        } catch (Exception e) {
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.reloadImage();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        AboutShow about = new AboutShow();

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        if (System.getProperty("os.arch").equals("amd64")) {
            System.load(System.getProperty("user.home") + "\\Documents\\opencv\\build\\java\\x64\\opencv_java341.dll");
        } else {
            System.load(System.getProperty("user.home") + "\\Documents\\opencv\\build\\java\\x86\\opencv_java341.dll");
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyFilterButton;
    private javax.swing.JTextField bColorField;
    private javax.swing.JButton changeAreaButton;
    private javax.swing.JButton confirmCoordButton;
    private javax.swing.JButton confirmSampleButton;
    private javax.swing.JButton exportToDesktopButton;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JSlider filterSlider;
    private javax.swing.JTextField gColorField;
    private javax.swing.JButton getPointsButtons;
    private javax.swing.JButton getRGBButton;
    private javax.swing.JLabel imagePrev;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton lockFilterButton;
    private javax.swing.JLabel modLabel;
    private javax.swing.JTextField nPixelFiltrado;
    private javax.swing.JTextField nPixelsSample;
    private javax.swing.JButton nSelectButton;
    private javax.swing.JTextField nSelectField;
    private javax.swing.JLabel nSelectLabel;
    private javax.swing.JTextField nameSample;
    private javax.swing.JButton nomeSampleOK;
    private javax.swing.JButton openImage;
    private javax.swing.JTextField prcBioSample;
    private javax.swing.JTextField rColorField;
    private javax.swing.JButton resetSelectButton;
    private javax.swing.JButton saveResults;
    private javax.swing.JButton senseDirectButton;
    private javax.swing.JLabel senseDirectLabel;
    private javax.swing.JTextField senseNumberLabel;
    private javax.swing.JRadioButton senseOn;
    private javax.swing.JTextField xMaxField;
    private javax.swing.JTextField xMinField;
    private javax.swing.JLabel xmaxLabel;
    private javax.swing.JLabel xminLabel;
    private javax.swing.JTextField yMaxField;
    private javax.swing.JTextField yMinField;
    private javax.swing.JLabel ymaxLabel;
    private javax.swing.JLabel yminLabel;
    // End of variables declaration//GEN-END:variables
}
